package pong;

import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;

import org.lwjgl.glfw.GLFWVidMode;
import org.lwjgl.opengl.GL;



public class main {
    public static float max_vol = 0.05f;


	public static void main(String[] args) throws InterruptedException{
        //INIT GLFW
        if (!glfwInit()){
            throw new IllegalStateException("Failed to initialize GLFW!");
        }
        glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE);
        GLFWVidMode videoMode = glfwGetVideoMode(glfwGetPrimaryMonitor());
        long window = glfwCreateWindow(videoMode.width(), videoMode.height(), "RuR", glfwGetPrimaryMonitor(), 0);
        glfwShowWindow(window);
        glfwMakeContextCurrent(window);
        GL.createCapabilities();
        glClearColor(0, 0, 0, 0);
        
        //Init Player
        paddle p1 = new paddle();
        ai en = new ai();
        ball ball = new ball();
        //Game loop
        while (!glfwWindowShouldClose(window)){
            //Processes events
            glfwPollEvents();
            //Clears the screen (context)
            glClear(GL_COLOR_BUFFER_BIT);
            
            	if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_TRUE && p1.getCoords()[1] + p1.getDem()[1] <= 1) p1.velY(max_vol);
            	if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_TRUE && p1.getCoords()[1] - p1.getDem()[1] >= -1) p1.velY(-max_vol);
            	
            	ball.updateBall();
            	en.path(ball);
            	
            	
            	draw_rect(ball);
            draw_rect(p1);
            draw_rect(en);
            //Swaps buffers (display and draw)
            glfwSwapBuffers(window);
        }

        //Closes app and cleans memory
        glfwTerminate();
    }
    

    public static void draw_rect(paddle p){
        glBegin(GL_QUADS);
        glColor4f(0, 255, 128, 0);
        glVertex2f(-p.getDem()[0]+(float)p.getCoords()[0], p.getDem()[1]+(float)p.getCoords()[1]);
        glVertex2f(p.getDem()[0]+(float)p.getCoords()[0], p.getDem()[1]+(float)p.getCoords()[1]);
        glVertex2f(p.getDem()[0]+(float)p.getCoords()[0], -p.getDem()[1]+(float)p.getCoords()[1]);
        glVertex2f(-p.getDem()[0]+(float)p.getCoords()[0], -p.getDem()[1]+(float)p.getCoords()[1]);
        glEnd();
    }
    
    public static void draw_rect(ball p){
        glBegin(GL_QUADS);
        glColor4f(0, 255, 128, 0);
        glVertex2f(-p.getDem()[0]+(float)p.getCoords()[0], p.getDem()[1]+(float)p.getCoords()[1]);
        glVertex2f(p.getDem()[0]+(float)p.getCoords()[0], p.getDem()[1]+(float)p.getCoords()[1]);
        glVertex2f(p.getDem()[0]+(float)p.getCoords()[0], -p.getDem()[1]+(float)p.getCoords()[1]);
        glVertex2f(-p.getDem()[0]+(float)p.getCoords()[0], -p.getDem()[1]+(float)p.getCoords()[1]);
        glEnd();
    }
    
    public static void draw_rect(ai p){
        glBegin(GL_QUADS);
        glColor4f(0, 255, 128, 0);
        glVertex2f(-p.getDem()[0]+(float)p.getCoords()[0], p.getDem()[1]+(float)p.getCoords()[1]);
        glVertex2f(p.getDem()[0]+(float)p.getCoords()[0], p.getDem()[1]+(float)p.getCoords()[1]);
        glVertex2f(p.getDem()[0]+(float)p.getCoords()[0], -p.getDem()[1]+(float)p.getCoords()[1]);
        glVertex2f(-p.getDem()[0]+(float)p.getCoords()[0], -p.getDem()[1]+(float)p.getCoords()[1]);
        glEnd();
    }

  

}
